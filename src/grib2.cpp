/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:
 * Created:
 * Copyright:
 * License:   	wxWidgets license (www.wxwidgets.org)
 *
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/
//#define GRIB2_DEBUG

#include "stdio.h"

#include "wx/wx.h"
#include "wx/dir.h"
#include <wx/wfstream.h>
#include <wx/sstream.h>
#include <wx/protocol/http.h>
#include <wx/treectrl.h>
#include <wx/hash.h>
#include <wx/utils.h>
#include <wx/log.h>
#include <wx/stdpaths.h>

//#include "folder.xpm"

#include "grib2.h"
#include "grib_reader.h"
#include "grib2data.h"
#include "Sections/section0.h"
#include "Sections/section1.h"
#include "Sections/section2.h"
#include "Sections/section3.h"
#include "Sections/section4.h"
#include "grib2_pi.h"

/*
// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit() {
	SetTopWindow( new MainDialog( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}
*/
////////////////////////////////////////////////////////////////////////////////
// main application frame implementation
////////////////////////////////////////////////////////////////////////////////

MainDialog::MainDialog(wxWindow *parent) : GribDialog( parent ) 
{
	this->gribReader = new GribReader(this);
	this->m_parent = parent;
	selectionRectangle.bottomLat = selectionRectangle.bottomLon 
	= selectionRectangle.topLat = selectionRectangle.topLon = GRIB_NOTDEF;

	log_window_m = NULL;

#ifdef GRIB2_DEBUG
  wxString LogTitle( wxString::Format( _("Debug Window") ) );
  log_window_m = new wxLogWindow( NULL, LogTitle, false, false );
  log_window_m->SetVerbose( true );
  log_window_m->GetFrame()->SetSize(wxRect(0,0,400,800));
  log_window_m->Show( true );	
#endif	
}

MainDialog::~MainDialog() 
{
	if(log_window_m)
		delete log_window_m;
	delete gribReader;
}

void MainDialog::setPlugIn(grib2_pi *p)
{
  this->pPlugIn = p;
  this->m_textCtrlDir->SetValue(pPlugIn->m_grib_dir);
}

void MainDialog::SetCursorLatLon(double lat, double lon)
{
      m_cursor_lon = lon;
      m_cursor_lat = lat;

      UpdateTrackingControls();
}

void MainDialog::UpdateTrackingControls()
{
   this->m_WindDir->Clear();  
   this->m_textCtrlWindForce->Clear();
   this->m_textCtrlWindKts->Clear();
   this->m_textCtrlBft->Clear();   
   
   this->m_textCtrlGust->Clear();
   this->m_textCtrlGustBft->Clear();
   this->m_textCtrlGustKts->Clear();

   this->m_textCtrlWaveDir->Clear();
   this->m_textCtrlWaveHeight->Clear();
   this->m_textCtrlSwMin->Clear();
   this->m_textCtrlSwMax->Clear();
   
   this->m_textCtrlPressure->Clear();
   this->m_textCtrlClouds->Clear();
   this->m_textCtrlTemperature->Clear();

   this->m_textCtrlCurrentDir->Clear();
   this->m_textCtrlCurrentForce->Clear();  
   
   printWindData();
   printGustsData();
   printWaveData();
   printCurrentData();
   printPressureData();
   printCloudsData();
   printTemperatureData();
   
}

void MainDialog::printWindData()
{
      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;

            //    Update the wind control
        if(hash && hash->Get(WINDDIR) &&  hash->Get(WIND))
            { 	
		double **windForce = (double **) hash->Get(WIND);
		double **windDir   = (double **) hash->Get(WINDDIR);
		double wForce = this->gribReader->grib2Data->getInterpolatedValue(windForce,m_cursor_lon, m_cursor_lat, true);
		double wDir   = this->gribReader->grib2Data->getInterpolatedValue(windDir  ,m_cursor_lon, m_cursor_lat, true);

                  if((wForce != GRIB_NOTDEF) && (wDir != GRIB_NOTDEF))
                  {
                        double  vkn = wForce*3.6/1.852;
                        wxString t;
			
                        t.Printf(_T("%2.1f"),vkn);
                        this->m_textCtrlWindKts->AppendText(t);

			t.Printf(_T("%3.1f"),wForce);
                        this->m_textCtrlWindForce->AppendText(t);
			
                        t.Printf(_T("%03.0f"),wDir);
                        this->m_WindDir->AppendText(t);
			
			this->m_textCtrlBft->AppendText(toBeaufort(wForce));

                  }
            }
      }
}

void MainDialog::printGustsData()
{
      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;

            //    Update the wind control
            if( hash->Get(GUST))
            { 	
		double **windForce = (double **) hash->Get(GUST);

		double wGust = this->gribReader->grib2Data->getInterpolatedValue(windForce,m_cursor_lon, m_cursor_lat, true);

                  if((wGust != GRIB_NOTDEF))
                  {
                        double  vkn = wGust*3.6/1.852;
                        wxString t;
			
                        t.Printf(_T("%2.1f"),vkn);
			this->m_textCtrlGustKts->AppendText(t);

			t.Printf(_T("%3.1f"),wGust);
                        this->m_textCtrlGust->AppendText(t);
			
			this->m_textCtrlGustBft->AppendText(toBeaufort(wGust));
                  }
            }
      }
}


void MainDialog::printWaveData()
{
      wxString t;
      double **waveDir;
      double wDir;
      double **waveHeight;
      double wHeight;
      double **swellMin, **swellMax;
      double sMin, sMax;
      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;

            //    Update the wind control
            if(hash && hash->Get(WAVEDIR))
            { 	
		waveDir = (double **) hash->Get(WAVEDIR);
		wDir = this->gribReader->grib2Data->getInterpolatedValue(waveDir,m_cursor_lon, m_cursor_lat, true);
		if(wDir != GRIB_NOTDEF) 
                  {
			t.Printf(_T("%3.1f"),wDir);
                        this->m_textCtrlWaveDir->AppendText(t);
		  }		
	    }

	    if(hash &&  hash->Get(WAVEHIGHT))
	    {
		waveHeight   = (double **) hash->Get(WAVEHIGHT);
		wHeight = this->gribReader->grib2Data->getInterpolatedValue(waveHeight  ,m_cursor_lon, m_cursor_lat, true);
		if(wHeight != GRIB_NOTDEF)
		  {
                        t.Printf(_T("%2.1f"),wHeight);
                        this->m_textCtrlWaveHeight->AppendText(t);
		  }		
	    }
	    
	    if(hash && hash->Get(SWELL))
	    {
		swellMin = (double **) hash->Get(SWELL);
		swellMax   = (double **) hash->Get(SWELLMAX);
		sMin    = this->gribReader->grib2Data->getInterpolatedValue(swellMin,m_cursor_lon, m_cursor_lat, true);
		if(swellMax)
		sMax = this->gribReader->grib2Data->getInterpolatedValue(swellMax  ,m_cursor_lon, m_cursor_lat, true);
		if((sMin != GRIB_NOTDEF))
		  {
			t.Printf(_T("%2.1f"),sMin);
                        this->m_textCtrlSwMin->AppendText(t);
			if(sMax != GRIB_NOTDEF)
			{
			  t.Printf(_T("%2.1f"),sMax);
			  this->m_textCtrlSwMax->AppendText(t);			
			}
		  } 
	    }                
      }
}

void MainDialog::printCurrentData()
{
      wxString t;
      double **currentDir;
      double cDir;
      double **currentForce;
      double cForce;

      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;
	    if(!hash) return;
	    cDir = GRIB_NOTDEF;
	    cForce = GRIB_NOTDEF;
	    
            //    Update the wind control
            if(hash->Get(CURRENTU))
            { 	
		currentDir = (double **) hash->Get(CURRENTU);
		cDir = this->gribReader->grib2Data->getInterpolatedValue(currentDir,m_cursor_lon, m_cursor_lat, true);
		if(cDir == GRIB_NOTDEF) return;
	    }

	    if(hash->Get(CURRENTV))
	    {
		currentForce   = (double **) hash->Get(CURRENTV);
		cForce = this->gribReader->grib2Data->getInterpolatedValue(currentForce,m_cursor_lon, m_cursor_lat, true);

		if((cDir != GRIB_NOTDEF) && (cForce != GRIB_NOTDEF))
		{
		  double force = sqrt(cDir*cDir+cForce*cForce)*3.6/1.852;
		  t.Printf(_T("%1.1f"),force);
		  this->m_textCtrlCurrentForce->AppendText(t);
		  double dir =  90. + (atan2(cForce, -cDir)  * 180. / PI);
		  if(dir < 0) dir = 360+dir;
		  t.Printf(_T("%3.1f"),dir);
		  this->m_textCtrlCurrentDir->AppendText(t);
		}
	    }   
      }
}


void MainDialog::printCloudsData()
{
      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;

            //    Update the wind control
            if(hash && hash->Get(CLOUD))
            { 	
		double **cloudData = (double **) hash->Get(CLOUD);
		double clouds    = this->gribReader->grib2Data->getInterpolatedValue(cloudData,m_cursor_lon, m_cursor_lat, true);

		if((clouds != GRIB_NOTDEF))
                  {
                        wxString t;
			t.Printf(_T("%3.1f"),clouds);
                        this->m_textCtrlClouds->AppendText(t);

                  }
            }
      }
}

void MainDialog::printPressureData()
{
      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;

            //    Update the wind control
            if(hash && hash->Get(PRESSURE))
            { 	
		double **pressureData = (double **) hash->Get(PRESSURE);
		double pressure    = this->gribReader->grib2Data->getInterpolatedValue(pressureData,m_cursor_lon, m_cursor_lat, true);

		if((pressure != GRIB_NOTDEF))
                  {
                        wxString t;
			t.Printf(_T("%4.0f"),pressure);
                        this->m_textCtrlPressure->AppendText(t);

                  }
            }
      }
}

void MainDialog::printTemperatureData()
{     
      if(this->gribReader->grib2Data)
      {
	    wxHashTable* hash = this->gribReader->grib2Data->hash;

            //    Update the wind control
            if(hash && hash->Get(TEMP))
            { 	
		double **tempData = (double **) hash->Get(TEMP);
		double temperature = this->gribReader->grib2Data->getInterpolatedValue(tempData,m_cursor_lon, m_cursor_lat, true);

		if((temperature != GRIB_NOTDEF))
                  {
                        wxString t;
						t.Printf(_T("%2.1f"),temperature);
                        this->m_textCtrlTemperature->AppendText(t);

                  }
            }
      }
}

wxString MainDialog::toBeaufort(wxFloat32 w)
{
    wxUint16 b;
    
    if(w < 0.5) b = 0;
    else if(w >  0.5 && w <  1.6) b = 1;
    else if(w >  1.6 && w <  3.4) b = 2;
    else if(w >  3.4 && w <  5.5) b = 3;
    else if(w >  5.5 && w <  8.0) b = 4;    
    else if(w >  8.0 && w < 10.8) b = 5;
    else if(w > 10.8 && w < 13.9) b = 6;
    else if(w > 13.9 && w < 17.2) b = 7;
    else if(w > 17.2 && w < 20.8) b = 8;
    else if(w > 20.8 && w < 24.5) b = 9;
    else if(w > 24.5 && w < 28.5) b = 10;
    else if(w > 28.5 && w < 32.7) b = 11;
    else if(w > 32.7) b = 12;

    
    return wxString::Format(_("%i"),b);
}


void MainDialog::OnCloseFrame(wxCloseEvent& event) {

}

void MainDialog::onCloseDialog(wxCloseEvent& event)
{ 
    pPlugIn->OnGribDialogClose();   
}

void MainDialog::OnExitClick(wxCommandEvent& event) {
//	Destroy();
}

void MainDialog::onFileButtonClick(wxCommandEvent& event) 
{
	wxDirDialog fd(this,_("Select a directory"),pPlugIn->m_grib_dir);

	if(fd.ShowModal() != wxID_OK) return;
	pPlugIn->m_grib_dir = fd.GetPath();
	this->m_textCtrlDir->SetValue(pPlugIn->m_grib_dir);
	fd.Destroy();
}

void MainDialog::onDirChanged(wxCommandEvent& event) 
{
	wxStandardPathsBase &std_path = wxStandardPathsBase::Get(); 
	wxString std = std_path.GetDocumentsDir();

	if(this->m_textCtrlDir->GetValue().length() != 0 && pPlugIn->m_grib_dir != std_path.GetDocumentsDir()) 
		fillDirTree(this->m_textCtrlDir->GetValue(), true, 0);
	else
		this->m_treeCtrl->DeleteAllItems();
}

void MainDialog::onPageChanged( wxNotebookEvent& event )
{
//	if(this->m_treeCtrl->GetChildrenCount(this->m_treeCtrl->GetRootItem()) == 0) 
//		return;
	
	if(event.GetSelection() == 0)
	{
		if(!this->m_textCtrlDir->GetValue().IsEmpty())
		{
			fillDirTree(this->m_textCtrlDir->GetValue(), true, 0);
			resetSelectionRectangle(false);
		}
	}
	else
	{
	    setSelectionRectangle();
	}
	GribDialog::onPageChanged(event);
}

void MainDialog::onTreeSelectionChanged(wxTreeEvent& event) 
{
	if(this->gribReader->isReading == true){ 	GribDialog::onTreeSelectionChanged(event); return; }

	wxString WeekDay[7] = {_("Sunday"),_("Monday"),_("Tuesday"),_("Wednesday"),_("Thursday"),_("Friday"),_("Saturday")};
	
	if(this->m_treeCtrl->GetRootItem() == event.GetItem()) 
		return;
	
	//wxString pathname = this->m_textCtrlDir->GetValue();
	wxString filename = this->m_treeCtrl->GetItemText(event.GetItem());
	MyTreeItemData *data = (MyTreeItemData *) this->m_treeCtrl->GetItemData(event.GetItem());

	if(data != NULL && data->fp != -1)
	{
		this->gribReader->readGribFile(data->file, data->fp, data->hour, data->dt);	
		pPlugIn->GetGRIBOverlayFactory()->renderSelectionRectangle = false;
		RequestRefresh(m_parent);

		this->m_staticTextDateTime->SetLabel(WeekDay[data->dt.GetWeekDay()]+_("  ")+data->dt.FormatDate()+_("  ")+data->dt.FormatTime());
	}
	GribDialog::onTreeSelectionChanged(event);
}

void MainDialog::onTreeItemRightClick(wxTreeEvent& event)
{
    if(this->m_treeCtrl->GetRootItem() == event.GetItem()) 
		return; 
    
    wxTreeItemId id =  this->m_treeCtrl->GetSelection();
    MyTreeItemData *data = (MyTreeItemData *) this->m_treeCtrl->GetItemData(id);   

    if(data != NULL)
    {
      wxMessageDialog *dlg = new wxMessageDialog(
	this,wxString::Format(_("Delete File ?\n\n%s"),data->file.c_str()),_("MessageBox"),wxOK|wxCANCEL);
      int i = dlg->ShowModal();

      if(i == wxID_OK && data != NULL)
      {
	wxString g = data->file;
	wxRemoveFile(data->file);

	this->m_treeCtrl->Delete(id);
	fillDirTree(this->m_textCtrlDir->GetValue(), true, 0);
      }
    }
}


void MainDialog::onDWindClick( wxCommandEvent& event )
{
	RequestRefresh(m_parent);  
}
void MainDialog::onBmpForceClick(wxCommandEvent& event)
{
	RequestRefresh(m_parent);
}
void MainDialog::onDWaveClick( wxCommandEvent& event ) 
{
	RequestRefresh(m_parent); 
}
void MainDialog::onBmpWaveHeightClick(wxCommandEvent& event)
{
	RequestRefresh(m_parent);
}
void MainDialog::onBmpCloudsClick( wxCommandEvent& event )
{
	RequestRefresh(m_parent);  
}
void MainDialog::onDPressureClick( wxCommandEvent& event )
{
	RequestRefresh(m_parent);  
}
void MainDialog::onBmpTemperatureClick( wxCommandEvent& event )
{
	RequestRefresh(m_parent); 
}
void MainDialog::onDCurrentClick( wxCommandEvent& event )
{
	RequestRefresh(m_parent);  
}
void MainDialog::onBmpCurrentForceClick(wxCommandEvent& event)
{
	RequestRefresh(m_parent);
}
void MainDialog::onBmpGustsClick(wxCommandEvent& event)
{
	RequestRefresh(m_parent);
}
void MainDialog::onBmpSwellClick(wxCommandEvent& event)
{
	RequestRefresh(m_parent);
}

void MainDialog::onButtonSelectionReset(wxCommandEvent& event)
{
    resetSelectionRectangle(true);
}

void MainDialog::resetSelectionRectangle(bool i)
{
    if(i)
    {
      this->m_textCtrlSelectionTopLat->Clear();
      this->m_textCtrlSelectionTopLon->Clear();
      this->m_textCtrlSelectionBottomLat->Clear();
      this->m_textCtrlSelectionBottomLon->Clear(); 
    }
    selectionRectangle.bottomLat = selectionRectangle.bottomLon 
    = selectionRectangle.topLat = selectionRectangle.topLon = GRIB_NOTDEF; 

//	pPlugIn->GetGRIBOverlayFactory()->renderSelection= false;
    RequestRefresh(m_parent);
}

void MainDialog::setSelectionRectangle()
{
    if(!m_textCtrlSelectionTopLat->GetValue().IsEmpty())
    {
      selectionRectangle.bottomLat = wxAtof(m_textCtrlSelectionBottomLat->GetValue());
      selectionRectangle.bottomLon = wxAtof(m_textCtrlSelectionBottomLon->GetValue());
      selectionRectangle.topLat =    wxAtof(m_textCtrlSelectionTopLat->GetValue());
      selectionRectangle.topLon =    wxAtof(m_textCtrlSelectionTopLon->GetValue()); 

      RequestRefresh(m_parent);
    }   
}



void MainDialog::OnCharNoteBook1(wxKeyEvent& event)
{
  pPlugIn->GetGRIBOverlayFactory()->renderSelectionRectangle = false;

  if(event.GetKeyCode() == WXK_HOME)
  {
    this->m_textCtrlSelectionTopLat->Clear();
    this->m_textCtrlSelectionTopLon->Clear();
    selectionRectangle.topLat = m_cursor_lat;
    selectionRectangle.topLon = m_cursor_lon;
    this->m_textCtrlSelectionTopLat->AppendText(wxString::Format(_("%f"),m_cursor_lat));
    this->m_textCtrlSelectionTopLon->AppendText(wxString::Format(_("%f"),m_cursor_lon));
  }
  
  if(event.GetKeyCode() == WXK_END)
  {
    this->m_textCtrlSelectionBottomLat->Clear();
    this->m_textCtrlSelectionBottomLon->Clear();
    selectionRectangle.bottomLat = m_cursor_lat;
    selectionRectangle.bottomLon = m_cursor_lon;
    this->m_textCtrlSelectionBottomLat->AppendText(wxString::Format(_("%f"),m_cursor_lat));
    this->m_textCtrlSelectionBottomLon->AppendText(wxString::Format(_("%f"),m_cursor_lon));
	pPlugIn->GetGRIBOverlayFactory()->renderSelectionRectangle = true;
  }  
  

  if(pPlugIn->GetGRIBOverlayFactory()->renderSelectionRectangle)
  //{
   // if((selectionRectangle.bottomLat != GRIB_NOTDEF && selectionRectangle.topLat < selectionRectangle.bottomLat))
	//||
	// (selectionRectangle.bottomLon != GRIB_NOTDEF && selectionRectangle.topLon < selectionRectangle.bottomLon))
    {
		wxDouble tempLat,tempLon;
		tempLat = selectionRectangle.topLat;
		tempLon = selectionRectangle.topLon;
		selectionRectangle.topLat = selectionRectangle.bottomLat;
		selectionRectangle.topLon = selectionRectangle.bottomLon;
		selectionRectangle.bottomLat = tempLat;
		selectionRectangle.bottomLon = tempLon;
	
		m_textCtrlSelectionTopLat->Clear();
		m_textCtrlSelectionTopLon->Clear();
		m_textCtrlSelectionBottomLat->Clear();
        m_textCtrlSelectionBottomLon->Clear();
	
		m_textCtrlSelectionTopLat->AppendText(wxString::Format(_("%f"),selectionRectangle.topLat));
		m_textCtrlSelectionTopLon->AppendText(wxString::Format(_("%f"),selectionRectangle.topLon));
		m_textCtrlSelectionBottomLat->AppendText(wxString::Format(_("%f"),selectionRectangle.bottomLat));
		m_textCtrlSelectionBottomLon->AppendText(wxString::Format(_("%f"),selectionRectangle.bottomLon));
    pPlugIn->GetGRIBOverlayFactory()->setSelectionRectangle(&selectionRectangle);
	pPlugIn->GetGRIBOverlayFactory()->m_bReadyToRender = true;
	RequestRefresh(m_parent);
   // }
  }
}
	
void MainDialog::onDownLoadOK( wxCommandEvent& event )
{
	int error = 0;
	int x;
	bool meteo = false, on = false;
	wxString file;
	wxString dirStr;
	wxHTTP get;
	wxInputStream *httpStream;	
	wxDateTime dt;
	dt = dt.Now();	

	this->pPlugIn->GetGRIBOverlayFactory()->m_bReadyToRender = false;
	m_textCtrlDownload->Clear();
	
	if(m_textCtrlSelectionBottomLat->GetValue().IsEmpty() ||
	   m_textCtrlSelectionBottomLon->GetValue().IsEmpty() ||
	   m_textCtrlSelectionTopLat->GetValue().IsEmpty()    ||
	   m_textCtrlSelectionTopLon->GetValue().IsEmpty())
	{
	    wxMessageBox(_("Please select a region first"));
	    return;
	}
	
	wxString hrs = m_choiceHours->GetStringSelection();
	long incr; 
	long days;
	m_choiceDays->GetStringSelection().ToLong(&days);
	m_choiceHours->GetStringSelection().ToLong(&incr);	
	int dirHrs = ((int)(dt.GetHour()/incr))*incr; 
	int totalHrs = (this->m_choiceDays->GetSelection()+1)*24 + dirHrs;
	if(totalHrs > 168) totalHrs = 168;
	
	if(this->m_checkBoxClouds->IsChecked() || this->m_checkBoxPressure->IsChecked() 
	|| this->m_checkBoxRain->IsChecked() || this->m_checkBoxTemperature->IsChecked())
		{ meteo = true; on = true; }
	
	wxApp::IsMainLoopRunning(); 
	this->m_textCtrlDownload->Clear();


	dt = dt.ToUTC();

	int h = dt.GetHour();
	int u = h % 6;
	if( u == 0)
		h -= 6;
	else
		h -= u;

	int ft = h - 6;
	wxTimeSpan span(u,0,0,0);
	dt -= span;

	wxString out_str = dt.FormatISODate();
	out_str.Replace(_("-"),_T(""));
	wxString fn(this->m_textCtrlDir->GetValue()+_("/")+out_str+wxString::Format(_("%02i"),dirHrs)+_(".grib2"));

//	wxFile fe;
/*	if(fe.Exists(fn))
		{
			int answer = wxMessageBox(_("File exists !\nAppend data to file ?"), _T(""),wxYES_NO);
			if(answer == wxNO)
				remove(fn.mb_str());
		}
*/
	wxFile f(fn,wxFile::write_append);
	wxFileOutputStream out_stream(f);	

	for(x = h; x <= totalHrs && error < 2; x += incr)
	{
		if(on == false)
			{ file = createOceanDownloadString(ft,h,hrs,x,&dirStr,dt); on = true; }
		else
			{ file = createMeteoDownloadString(ft,h,hrs,x,&dirStr,dt); on = false; }	
//		wxMessageBox(file);	
//	 continue;
		get.SetHeader(_T("Content-type"), _T("text/html; charset=utf-8"));
		get.SetTimeout(10);  

		while (!get.Connect(_T("nomads.ncep.noaa.gov"))) 
			wxSleep(5);	
		
		httpStream = get.GetInputStream(file);
		wxInt16 resStream = get.GetResponse();
		
		this->m_textCtrlDownload->AppendText(
			wxString::Format(_("%s Forcast/h: %i\n%s %i-%s\n"),
			(!on)?_("Meteorological"):_("Ozeanographic"),
			 x,out_str.c_str(),resStream,(resStream == 200)? _("OK ") : _("FAILURE ")));
//		this->m_textCtrlDownload->AppendText(_T("\n")+file+_T("\n"));
			
		if (get.GetError() == wxPROTO_NOERR)
		{
			httpStream->Read(out_stream);
			error = 0;
		}
		else
		{
			x -= incr*2;
			error++;
			wxMessageBox(_("Unable to connect!"));
			break;
		}
		
		if(meteo) { if(on == false) x -= incr; }

	}
		get.Close();	 
	out_stream.Close();
	wxDELETE(httpStream);

	this->m_textCtrlDownload->AppendText((error == 0)
		? wxString(_("\nDownload finished\n"))
		 :wxString(_("Download error !\n"))
		 );

//	this->pPlugIn->GetGRIBOverlayFactory()->m_bReadyToRender = false;
//	this->m_notebook1->SetSelection(0);
}

wxString MainDialog::createOceanDownloadString(int ft, int h, wxString hrs,int incr,wxString *str, wxDateTime dt)
{	
	wxString vars = _T("");
	float leftLat, leftLong;
	float rightLat,rightLong;
	
	leftLong = selectionRectangle.topLon; leftLat = selectionRectangle.topLat;
	rightLong = selectionRectangle.bottomLon; rightLat = selectionRectangle.bottomLat;
	
	wxString temp(_("/cgi-bin/filter_wave_multi.pl?file=multi_1.glo_30mext.t#xx#z.fyy.grib2#vars#&subregion=&leftlon=#lLong#&rightlon=#rLong#&toplat=#tLat#&bottomlat=#bLat#&dir=%2Fwave.#zz#"));
	
	vars += _("&var_UGRD=on&var_VGRD=on");
	if(this->m_checkBoxWind->IsChecked()) vars += _("&var_WDIR=on&var_WIND=on");
	if(this->m_checkBoxWaves->IsChecked()) vars += _("&var_WVDIR=on&var_HTSGW=on");
	if(this->m_checkBoxSwell->IsChecked()) vars += _("&var_SWELL=on");
	
	temp.Replace(_("#xx#"),wxString::Format(_("%02i"),ft));
	
	wxString file = temp;	
	file.Replace(_("#vars#"),vars);
	
	file.Replace(wxT("yy"),wxString::Format(_("%03i"),incr));	
	*str = dt.FormatISODate();
	str->Replace(_("-"),_T(""));
	file.Replace(wxT("#zz#"),*str);
	
	file.Replace(_("#tLat#"),wxString::Format(_("%f"),rightLat));
	file.Replace(_("#lLong#"),wxString::Format(_("%f"),rightLong));
	file.Replace(_("#bLat#"),wxString::Format(_("%f"),leftLat));
	file.Replace(_("#rLong#"),wxString::Format(_("%f"),leftLong));
	
	return file;
}

wxString MainDialog::createMeteoDownloadString(int ft, int h, wxString hrs,int incr,wxString *str, wxDateTime dt)
{
	wxString vars = _T("");
	float leftLat, leftLong;
	float rightLat,rightLong;
	
	leftLong = selectionRectangle.topLon; leftLat = selectionRectangle.topLat;
	rightLong = selectionRectangle.bottomLon; rightLat = selectionRectangle.bottomLat;
	
	wxString file(_T("/cgi-bin/filter_gfs_hd.pl?file=gfs.t#tt#z.mastergrb2f#yy#&lev_convective_cloud_layer=on#vars#&subregion=&leftlon=#lLong#&rightlon=#rLong#&toplat=#tLat#&bottomlat=#bLat#&dir=%2Fgfs.#zz#"));
	
	vars += _("&lev_surface=on");
	vars += _("&lev_convective_cloud_layer=on");

	if(this->m_checkBoxPressure->IsChecked()) vars += _("&var_PRES=on");
	if(this->m_checkBoxTemperature->IsChecked()) vars += _("&var_TMP=on");
	if(this->m_checkBoxClouds->IsChecked()) vars += _("&var_TCDC=on");
	if(this->m_checkBoxRain->IsChecked()) vars += _("&var_CRAIN=on");
	if(this->m_checkBoxGusts->IsChecked()) vars += _("&var_GUST=on");

	file.Replace(_("#tt#"),wxString::Format(_("%02i"),ft));
	file.Replace(_("#xx#"),hrs);
	file.Replace(_("#vars#"),vars);
	file.Replace(wxT("#yy#"),wxString::Format(_("%02i"),incr));		

	*str = dt.FormatISODate();
	str->Replace(_("-"),_T(""));

	file.Replace(_("#zz#"),wxString::Format(_T("%s%02i"),(*str).c_str(),ft));
	file.append(_("%2Fmaster"));
	
	file.Replace(_("#tLat#"),wxString::Format(_("%f"),rightLat));
	file.Replace(_("#lLong#"),wxString::Format(_("%f"),rightLong));
	file.Replace(_("#bLat#"),wxString::Format(_("%f"),leftLat));
	file.Replace(_("#rLong#"),wxString::Format(_("%f"),leftLong));

	return file;	
}
void MainDialog::fillDirTree(wxString path, bool start, wxTreeItemId id) 
{
    wxString file ;
    
	if(start == true) 
	{
		this->m_treeCtrl->DeleteAllItems();
		id = this->m_treeCtrl->AddRoot(_T(""));
		this->m_treeCtrl->SetItemText(id,_("Grib2-Files"));
		this->m_treeCtrl->SelectItem(id);
	}

	wxDir dir(path);
	if(dir.IsOpened() && dir.HasFiles())
	{
		wxString s;
		dir.GetFirst(&s);
		file = path +_("/") + s;
		
		wxTreeItemId iid = this->m_treeCtrl->AppendItem(id,s);
		this->m_treeCtrl->SetItemData(iid,new MyTreeItemData(-1,NULL,0,&file));	
		addChildren(iid,s);
		
		while(dir.GetNext(&s)) 
		{
			file = path +_("/") + s;
			wxTreeItemId iid = this->m_treeCtrl->AppendItem(id,s);
			this->m_treeCtrl->SetItemData(iid,new MyTreeItemData(-1,NULL,0,&file));
			addChildren(iid,s);
		}
		this->m_treeCtrl->Expand(id);		
	}
}

void MainDialog::addChildren(wxTreeItemId id, wxString fn)
{
	char s[2] = {'m','h'};
	wxFileOffset fp = 0;
	wxDateTime dt;
	wxUint32 hours = 0;
	wxString fileName;

	fileName = this->m_textCtrlDir->GetValue()+_("/")+fn;
	
	int nextSection = 0;
	wxULongLong length = 0;
	Grib2Message grib2Message;
	grib2Message.data = NULL;
	
	wxFileInputStream *stream = new wxFileInputStream(fileName);

	Section0 *section0 = new Section0(stream,&grib2Message);
	Section1 *section1 = new Section1(stream,&grib2Message);
	Section2 *section2 = new Section2(stream);	
	Section3 *section3 = new Section3(stream,&grib2Message);	
	Section4 *section4 = new Section4(stream,&grib2Message);
	
	while(!stream->Eof() && nextSection != -1)
	{
		if(nextSection == 0)
			nextSection = section0->readSection();
		if(nextSection == 1)
			nextSection = section1->readSection();
		if(nextSection == 2)
			nextSection = section2->readSection();
		if(nextSection == 3)
			nextSection = section3->readSection();
		if(nextSection == 4)
			nextSection = section4->readSection();	

		if(nextSection != -1 && grib2Message.forcastTimeUnits > hours || grib2Message.forcastTimeUnits == 0)
		{
			wxDateTime dt = grib2Message.dt;
			wxTimeSpan span(grib2Message.forcastTimeUnits);
			dt.SetHour(0); 
			dt.Add(span);
			wxTreeItemId itemId = this->m_treeCtrl->AppendItem(id,_T(""));
			this->m_treeCtrl->SetItemText(itemId,wxString::Format(_("%03i%c Forcast"),grib2Message.forcastTimeUnits,s[grib2Message.indicatorTimeRange]));
			wxString ds = dt.FormatDate();
			this->m_treeCtrl->SetItemData(itemId,new MyTreeItemData(fp,&dt,grib2Message.forcastTimeUnits,&fileName));	
			hours = grib2Message.forcastTimeUnits;
		}
		fp += grib2Message.length;
		stream->SeekI(fp);
		if(nextSection != -1) nextSection = 0;		
	}
	
	delete stream;
	delete section0;
	delete section1;
	delete section2;
	delete section3;
	delete section4;
}

MyTreeItemData::MyTreeItemData(wxUint64 fp, wxDateTime *dt, wxUint32 hour, wxString *fileName)  
{ 	
	this->fp = fp; this->hour = hour; this->file = *fileName;
	if(dt)
	{
		this->dt = wxDateTime(*dt);
		wxString d = this->dt.FormatDate();
	}
}
